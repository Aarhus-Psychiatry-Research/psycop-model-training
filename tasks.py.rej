diff a/tasks.py b/tasks.py	(rejected hunks)
@@ -1,5 +1,7 @@
 from pathlib import Path
+from typing import Optional
 
+from attr import dataclass
 from invoke import Context, Result, task
 
 
@@ -7,6 +9,20 @@ def echo_header(msg: str):
     print(f"\n--- {msg} ---")
 
 
+@dataclass
+class Emo:
+    APPLY = "🤖"
+    SUCCESS = "✅"
+    FAILURE = "🚨"
+    WARNING = "🚧"
+    SYNC = "🚂"
+    STARTING = "🔨"
+    PYTHON = "🐍"
+    CLEAN = "🧹"
+    TEST = "🧪"
+    COMMUNICATE = "📣"
+
+
 @task
 def setup(c: Context, python_version: str = "3.9"):
     git_init(c)
@@ -17,13 +33,13 @@ def setup(c: Context, python_version: str = "3.9"):
 def git_init(c: Context):
     # If no .git directory exits
     if not Path(".git").exists():
-        echo_header("🔨 Initializing Git repository")
+        echo_header(f"{Emo.STARTING} Initializing Git repository")
         c.run("git init")
         c.run("git add .")
         c.run("git commit -m 'Initial commit'")
-        print("✅ Git repository initialized")
+        print(f"{Emo.SUCCESS} Git repository initialized")
     else:
-        print("✅ Git repository already initialized")
+        print(f"{Emo.SUCCESS} Git repository already initialized")
 
 
 def setup_venv(
@@ -33,32 +49,44 @@ def setup_venv(
     venv_name = f'.venv{python_version.replace(".", "")}'
 
     if not Path(venv_name).exists():
-        echo_header("🔨 Creating virtual environment")
+        echo_header(f"{Emo.STARTING} Creating virtual environment")
         c.run(f"python{python_version} -m venv {venv_name}")
-        print("✅ Virtual environment created")
+        print(f"{Emo.SUCCESS} Virtual environment created")
     else:
-        print("✅ Virtual environment already exists")
+        print(f"{Emo.SUCCESS} Virtual environment already exists")
 
     c.run(f"source {venv_name}/bin/activate")
 
 
 @task
 def install(c: Context):
-    echo_header("🔨 Installing project")
+    echo_header(f"{Emo.STARTING} Installing project")
     c.run("pip install -e '.[dev,tests]'")
 
 
 @task
 def update(c: Context):
-    echo_header("🔨 Updating project")
+    echo_header(f"{Emo.STARTING} Updating project")
     c.run("pip install --upgrade -e '.[dev,tests]'")
 
 
 @task
-def test(c: Context):
-    echo_header("🧪 Running tests")
+def test(c: Context, min_latency: bool = True):
+    """Run tests.
+
+    Args:
+        min_latency (bool): If false, go for maximum throughput. If true, go for minimum latency.
+    """
+    echo_header(f"{Emo.TEST} Running tests")
+
+    if min_latency:
+        n = ""
+        plugins = "-p no:cov -p no:xdist -p no:instafail -p no:xdist"
+    else:
+        n = "-n auto "
+
     test_result: Result = c.run(
-        "pytest -n auto -rfE --failed-first -p no:typeguard -p no:cov --disable-warnings -q",
+        f"pytest {n}-rfE --failed-first {plugins} --disable-warnings -q",
         warn=True,
         pty=True,
     )
@@ -81,31 +109,34 @@ def test(c: Context):
 
             # Keep only that after ::
             line_sans_suffix = line_sans_prefix[line_sans_prefix.find("::") + 2 :]
-            print(f"FAILED 🚨 #{line_sans_suffix}     ")
+            print(f"FAILED {Emo.FAILURE} #{line_sans_suffix}     ")
 
+    if "failed" in test_result.stdout or "error" in test_result.stdout: 
         exit(0)
 
 
-def add_commit(c: Context):
+def _add_commit(c: Context, msg: Optional[str] = None):
     print("🔨 Adding and committing changes")
     c.run("git add .")
-    commit_msg = input("Commit message: ")
-    c.run(f'git commit -m "{commit_msg}"')
 
+    if msg is None:
+        msg = input("Commit message: ")
 
-def add_and_commit(c: Context):
-    git_status_result: Result = c.run(
-        "git status --porcelain",
-        pty=True,
-        hide=True,
-    )
+    c.run(f'git commit -m "{msg}"', pty=True, hide=True)
+    print("\n🤖 Changes added and committed\n")
 
-    uncommitted_changes = git_status_result.stdout != ""
-    uncommitted_changes_descr = git_status_result.stdout
 
-    if uncommitted_changes:
+def add_and_commit(c: Context, msg: Optional[str] = None):
+    """Add and commit all changes."""
+    if is_uncommitted_changes(c):
+        uncommitted_changes_descr = c.run(
+            "git status --porcelain",
+            pty=True,
+            hide=True,
+        ).stdout
+
         echo_header(
-            "🚧 Uncommitted changes detected",
+            f"{Emo.WARNING} Uncommitted changes detected",
         )
 
         input("Press enter to add and commit the changes...")
@@ -113,20 +144,31 @@ def add_and_commit(c: Context):
         for line in uncommitted_changes_descr.splitlines():
             print(f"    {line.strip()}")
         print("\n")
-        add_commit(c)
+        _add_commit(c, msg=msg)
+
+
+def is_uncommitted_changes(c: Context) -> bool:
+    git_status_result: Result = c.run(
+        "git status --porcelain",
+        pty=True,
+        hide=True,
+    )
+
+    uncommitted_changes = git_status_result.stdout != ""
+    return uncommitted_changes
 
 
 @task
 def pr(c: Context):
     add_and_commit(c)
     lint(c)
-    test(c)
+    test(c, min_latency=False)
     sync_with_git_remote(c)
     sync_pr(c)
 
 
 def sync_with_git_remote(c: Context):
-    echo_header("🚂 Syncing branch with remote")
+    echo_header(f"{Emo.SYNC} Syncing branch with remote")
 
     if not branch_exists_on_remote(c):
         c.run("git push --set-upstream origin HEAD")
@@ -138,7 +180,7 @@ def sync_with_git_remote(c: Context):
 
 
 def sync_pr(c: Context):
-    echo_header("💬 Syncing PR")
+    echo_header(f"{Emo.COMMUNICATE} Syncing PR")
     # Get current branch name
     branch_name = Path(".git/HEAD").read_text().split("/")[-1].strip()
     pr_result: Result = c.run(
@@ -175,15 +217,36 @@ def branch_exists_on_remote(c: Context) -> bool:
 
 @task
 def lint(c: Context):
+    if is_uncommitted_changes(c):
+        print(
+            f"{Emo.WARNING} Your git working directory is not clean. Stash or commit before linting.",
+        )
+        exit(0)
+
     pre_commit(c)
     mypy(c)
 
 
 def pre_commit(c: Context):
-    echo_header("🧹 Running pre-commit checks")
-    c.run("pre-commit run --all-files", pty=True)
+    echo_header(f"{Emo.CLEAN} Running pre-commit checks")
+    pre_commit_cmd = "pre-commit run --all-files"
+    result = c.run(pre_commit_cmd, pty=True, warn=True)
+
+    exit_if_error_in_stdout(result)
+
+    if "fixed" in result.stdout or "reformatted" in result.stdout:
+        _add_commit(c, msg="style: linting")
+
+        print(f"{Emo.APPLY} Fixed errors, re-running pre-commit checks")
+        second_result = c.run(pre_commit_cmd, pty=True, warn=True)
+        exit_if_error_in_stdout(second_result)
+
+
+def exit_if_error_in_stdout(result: Result):
+    if "error" in result.stdout:
+        exit(0)
 
 
 def mypy(c: Context):
-    echo_header("🧹 Running mypy")
+    echo_header(f"{Emo.CLEAN} Running mypy")
     c.run("mypy .", pty=True)
